
on:
  push:
    branches:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/setup-sam@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            s3:
              - 'src/s3/**'
            cloudwatch:
              - 'src/cloudwatch-logs/**'
            archive-reader:
              - 'src/archive-reader/**' 
            athena-s3:
              - 'src/athena-s3/**'
            cloudtrail:
              - 'src/cloudtrail/**'
            cloudtrail-sns:
              - 'src/cloudtrail-sns/**'
            cloudwatch-metrics:
              - 'src/cloudwatch-metrics/**'
            elasticsearch-reporter:
              - 'src/elasticsearch-reporter/**'
            kafka:
              - 'src/kafka/**'
            kinesis:
              - 'src/kinesis/**'
            lambda-manager:
              - 'src/lambda-manager/**'
            lambda-secretLayer:
              - 'src/lambda-secretLayer/**'
            mongodb-atlas:
              - 'src/mongodb-atlas/**'
            msk:
              - 'src/msk/**'
            resource-metadata:
              - 'src/resource-metadata/**'
            resource-tags:
              - 'src/resource-tags/**'
            s3-sns:
              - 'src/s3-sns/**'
            sf-eventlog:
              - 'src/sf-eventlog/**'
            sns:
              - 'src/sns/**'
            vpc-flow-logs:
              - 'src/vpc-flow-logs/**'

      # sam s3 build
      - if: steps.changes.outputs.s3 == 'true'
        name: S3 Build
        run: sam build --use-container
        working-directory: ./src/s3
      - if: steps.changes.outputs.s3 == 'true'
        name: S3 Package
        working-directory: ./src/s3
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix s3 \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.s3 == 'true'
        name: S3 Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/s3
      - if: steps.changes.outputs.s3 == 'true'
        name: S3 Store
        working-directory: ./src/s3
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/s3.zip
      # sam cloudwatch-logs build
      - if: steps.changes.outputs.cloudwatch == 'true'
        name: cloudwatch-logs Build
        run: sam build --use-container
        working-directory: ./src/cloudwatch-logs
      - if: steps.changes.outputs.cloudwatch == 'true'
        name: cloudwatch-logs Package
        working-directory: ./src/cloudwatch-logs
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix cloudwatch-logs \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.cloudwatch == 'true'
        name: cloudwatch-logs Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/cloudwatch-logs
      - if: steps.changes.outputs.cloudwatch == 'true'
        name: cloudwatch-logs Store
        working-directory: ./src/cloudwatch-logs
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/cloudwatch-logs.zip
      # sam archive-reader build
      - if: steps.changes.outputs.archive-reader == 'true'
        name: archive-reader Build
        run: sam build --use-container
        working-directory: ./src/archive-reader
      - if: steps.changes.outputs.archive-reader == 'true'
        name: archive-reader Package
        working-directory: ./src/archive-reader
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix archive-reader \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.archive-reader == 'true'
        name: archive-reader Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/archive-reader
      - if: steps.changes.outputs.archive-reader == 'true'
        name: archive-reader Store
        working-directory: ./src/archive-reader
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/archive-reader.zip
      # sam athena-s3 build
      - if: steps.changes.outputs.athena-s3 == 'true'
        name: athena-s3 Build
        run: sam build --use-container
        working-directory: ./src/athena-s3
      - if: steps.changes.outputs.athena-s3 == 'true'
        name: athena-s3 Package
        working-directory: ./src/athena-s3
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix athena-s3 \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.athena-s3 == 'true'
        name: athena-s3 Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/athena-s3
      - if: steps.changes.outputs.athena-s3 == 'true'
        name: athena-s3 Store
        working-directory: ./src/athena-s3
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/athena-s3.zip
      # sam cloudtrail build
      - if: steps.changes.outputs.cloudtrail == 'true'
        name: cloudtrail Build
        run: sam build --use-container
        working-directory: ./src/cloudtrail
      - if: steps.changes.outputs.cloudtrail == 'true'
        name: cloudtrail Package
        working-directory: ./src/cloudtrail
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix cloudtrail \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.cloudtrail == 'true'
        name: cloudtrail Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/cloudtrail
      - if: steps.changes.outputs.cloudtrail == 'true'
        name: cloudtrail Store
        working-directory: ./src/cloudtrail
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/cloudtrail.zip        
      # sam cloudtrail-sns build
      - if: steps.changes.outputs.cloudtrail-sns == 'true'
        name: cloudtrail-sns Build
        run: sam build --use-container
        working-directory: ./src/cloudtrail-sns
      - if: steps.changes.outputs.cloudtrail-sns == 'true'
        name: cloudtrail-sns Package
        working-directory: ./src/cloudtrail-sns
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix cloudtrail-sns \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.cloudtrail-sns == 'true'
        name: cloudtrail-sns Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/cloudtrail-sns
      - if: steps.changes.outputs.cloudtrail-sns == 'true'
        name: cloudtrail-sns Store
        working-directory: ./src/cloudtrail-sns
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/cloudtrail-sns.zip
      # sam cloudwatch-metrics build
      - if: steps.changes.outputs.cloudwatch-metrics == 'true'
        name: cloudwatch-metrics Build
        run: sam build --use-container
        working-directory: ./src/cloudwatch-metrics
      - if: steps.changes.outputs.cloudwatch-metrics == 'true'
        name: cloudwatch-metrics Package
        working-directory: ./src/cloudwatch-metrics
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix cloudwatch-metrics \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.cloudwatch-metrics == 'true'
        name: cloudwatch-metrics Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/cloudwatch-metrics
      - if: steps.changes.outputs.cloudwatch-metrics == 'true'
        name: cloudwatch-metrics Store
        working-directory: ./src/cloudwatch-metrics
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/cloudwatch-metrics.zip
      # sam elasticsearch-reporter build
      - if: steps.changes.outputs.elasticsearch-reporter == 'true'
        name: elasticsearch-reporter Build
        run: sam build --use-container
        working-directory: ./src/elasticsearch-reporter
      - if: steps.changes.outputs.elasticsearch-reporter == 'true'
        name: elasticsearch-reporter Package
        working-directory: ./src/elasticsearch-reporter
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix elasticsearch-reporter \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.elasticsearch-reporter == 'true'
        name: elasticsearch-reporter Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/elasticsearch-reporter
      - if: steps.changes.outputs.elasticsearch-reporter == 'true'
        name: elasticsearch-reporter Store
        working-directory: ./src/elasticsearch-reporter
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/elasticsearch-reporter.zip
      # sam kafka build
      - if: steps.changes.outputs.kafka == 'true'
        name: kafka Build
        run: sam build --use-container
        working-directory: ./src/kafka
      - if: steps.changes.outputs.kafka == 'true'
        name: kafka Package
        working-directory: ./src/kafka
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix kafka \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.kafka == 'true'
        name: kafka Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/kafka
      - if: steps.changes.outputs.kafka == 'true'
        name: kafka Store
        working-directory: ./src/kafka
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/kafka.zip
      # sam kinesis build
      - if: steps.changes.outputs.kinesis == 'true'
        name: kinesis Build
        run: sam build --use-container
        working-directory: ./src/kinesis
      - if: steps.changes.outputs.kinesis == 'true'
        name: kinesis Package
        working-directory: ./src/kinesis
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix kinesis \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.kinesis == 'true'
        name: kinesis Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/kinesis
      - if: steps.changes.outputs.kinesis == 'true'
        name: kinesis Store
        working-directory: ./src/kinesis
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/kinesis.zip
      # sam lambda-manager build
      - if: steps.changes.outputs.lambda-manager == 'true'
        name: lambda-manager Build
        run: sam build --use-container
        working-directory: ./src/lambda-manager
      - if: steps.changes.outputs.lambda-manager == 'true'
        name: lambda-manager Package
        working-directory: ./src/lambda-manager
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix lambda-manager \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.lambda-manager == 'true'
        name: lambda-manager Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/lambda-manager
      - if: steps.changes.outputs.lambda-manager == 'true'
        name: lambda-manager Store
        working-directory: ./src/lambda-manager
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/lambda-manager.zip
      # sam lambda-secretLayer build
      - if: steps.changes.outputs.lambda-secretLayer == 'true'
        name: lambda-secretLayer Build
        run: sam build --use-container
        working-directory: ./src/lambda-secretLayer
      - if: steps.changes.outputs.lambda-secretLayer == 'true'
        name: lambda-secretLayer Package
        working-directory: ./src/lambda-secretLayer
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix lambda-secretLayer \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.lambda-secretLayer == 'true'
        name: lambda-secretLayer Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/lambda-secretLayer
      - if: steps.changes.outputs.lambda-secretLayer == 'true'
        name: lambda-secretLayer Store
        working-directory: ./src/lambda-secretLayer
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/lambda-secretLayer.zip
      # sam mongodb-atlas build
      - if: steps.changes.outputs.mongodb-atlas == 'true'
        name: mongodb-atlas Build
        run: sam build --use-container
        working-directory: ./src/mongodb-atlas
      - if: steps.changes.outputs.mongodb-atlas == 'true'
        name: mongodb-atlas Package
        working-directory: ./src/mongodb-atlas
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix mongodb-atlas \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.mongodb-atlas == 'true'
        name: mongodb-atlas Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/mongodb-atlas
      - if: steps.changes.outputs.mongodb-atlas == 'true'
        name: mongodb-atlas Store
        working-directory: ./src/mongodb-atlas
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/mongodb-atlas.zip
      # sam msk build
      - if: steps.changes.outputs.msk == 'true'
        name: msk Build
        run: sam build --use-container
        working-directory: ./src/msk
      - if: steps.changes.outputs.msk == 'true'
        name: msk Package
        working-directory: ./src/msk
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix msk \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.msk == 'true'
        name: msk Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/msk
      - if: steps.changes.outputs.msk == 'true'
        name: msk Store
        working-directory: ./src/msk
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/msk.zip
      # sam resource-metadata build
      - if: steps.changes.outputs.resource-metadata == 'true'
        name: resource-metadata Build
        run: sam build --use-container
        working-directory: ./src/resource-metadata
      - if: steps.changes.outputs.resource-metadata == 'true'
        name: resource-metadata Package
        working-directory: ./src/resource-metadata
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix resource-metadata \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.resource-metadata == 'true'
        name: resource-metadata Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/resource-metadata
      - if: steps.changes.outputs.resource-metadata == 'true'
        name: resource-metadata Store
        working-directory: ./src/resource-metadata
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/resource-metadata.zip
      # sam resource-tags build
      - if: steps.changes.outputs.resource-tags == 'true'
        name: resource-tags Build
        run: sam build --use-container
        working-directory: ./src/resource-tags
      - if: steps.changes.outputs.resource-tags == 'true'
        name: resource-tags Package
        working-directory: ./src/resource-tags
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix resource-tags \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.resource-tags == 'true'
        name: resource-tags Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/resource-tags
      - if: steps.changes.outputs.resource-tags == 'true'
        name: resource-tags Store
        working-directory: ./src/resource-tags
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/resource-tags.zip
      # sam s3-sns build
      - if: steps.changes.outputs.s3-sns == 'true'
        name: s3-sns Build
        run: sam build --use-container
        working-directory: ./src/s3-sns
      - if: steps.changes.outputs.s3-sns == 'true'
        name: s3-sns Package
        working-directory: ./src/s3-sns
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix s3-sns \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.s3-sns == 'true'
        name: s3-sns Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/s3-sns
      - if: steps.changes.outputs.s3-sns == 'true'
        name: s3-sns Store
        working-directory: ./src/s3-sns
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/s3-sns.zip
     # sam sf-eventlog build
      - if: steps.changes.outputs.sf-eventlog == 'true'
        name: sf-eventlog Build
        run: sam build --use-container
        working-directory: ./src/sf-eventlog
      - if: steps.changes.outputs.sf-eventlog == 'true'
        name: sf-eventlog Package
        working-directory: ./src/sf-eventlog
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix sf-eventlog \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.sf-eventlog == 'true'
        name: sf-eventlog Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/sf-eventlog
      - if: steps.changes.outputs.sf-eventlog == 'true'
        name: sf-eventlog Store
        working-directory: ./src/sf-eventlog
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/sf-eventlog.zip
     # sam sns build
      - if: steps.changes.outputs.sns == 'true'
        name: sns Build
        run: sam build --use-container
        working-directory: ./src/sns
      - if: steps.changes.outputs.sns == 'true'
        name: sns Package
        working-directory: ./src/sns
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix sns \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.sns == 'true'
        name: sns Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/sns
      - if: steps.changes.outputs.sns == 'true'
        name: sns Store
        working-directory: ./src/sns
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/sns.zip
     # sam vpc-flow-logs build
      - if: steps.changes.outputs.vpc-flow-logs == 'true'
        name: vpc-flow-logs Build
        run: sam build --use-container
        working-directory: ./src/vpc-flow-logs
      - if: steps.changes.outputs.vpc-flow-logs == 'true'
        name: vpc-flow-logs Package
        working-directory: ./src/vpc-flow-logs
        run: |
          sam package \
             --s3-bucket juanfunctions \
             --s3-prefix vpc-flow-logs \
             --output-template-file packaged.yaml
      - if: steps.changes.outputs.vpc-flow-logs == 'true'
        name: vpc-flow-logs Publish
        run: sam publish --template packaged.yaml
        working-directory: ./src/vpc-flow-logs
      - if: steps.changes.outputs.vpc-flow-logs == 'true'
        name: vpc-flow-logs Store
        working-directory: ./src/vpc-flow-logs
        run: |
          aws s3 cp \
            $(yq -r '.Resources | to_entries | .[] | select(.key == "LambdaLayer" or .key == "LambdaFunction") | .value.Properties | to_entries | .[] | select(.key == "ContentUri" or .key == "CodeUri") | .value' packaged.yaml) \
            s3://juanfunctions-us-east-1/vpc-flow-logs.zip